<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cricket Score Management</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/0.155.0/three.min.js"></script>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: linear-gradient(180deg, #4CAF50, #1e3d59);
    }
    #root {
      width: 100vw;
      height: 100vh;
    }
  </style>
</head>
<body>
  <div id="root"></div>

  <script>
    const { useEffect, useRef } = React;

    const CricketScene = () => {
      const sceneRef = useRef(null);

      useEffect(() => {
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();

        renderer.setSize(window.innerWidth, window.innerHeight);
        sceneRef.current.appendChild(renderer.domElement);

        // Lighting
        const light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(5, 10, 7.5);
        scene.add(light);

        // Ground
        const groundGeometry = new THREE.PlaneGeometry(20, 20);
        const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x228B22 });
        const ground = new THREE.Mesh(groundGeometry, groundMaterial);
        ground.rotation.x = -Math.PI / 2;
        scene.add(ground);

        // Batsman
        const batsmanGeometry = new THREE.BoxGeometry(0.5, 1.5, 0.5);
        const batsmanMaterial = new THREE.MeshBasicMaterial({ color: 0xFF5733 });
        const batsman = new THREE.Mesh(batsmanGeometry, batsmanMaterial);
        batsman.position.set(0, 0.75, 0);
        scene.add(batsman);

        // Bowler
        const bowlerGeometry = new THREE.BoxGeometry(0.5, 1.5, 0.5);
        const bowlerMaterial = new THREE.MeshBasicMaterial({ color: 0x3498db });
        const bowler = new THREE.Mesh(bowlerGeometry, bowlerMaterial);
        bowler.position.set(-3, 0.75, 0);
        scene.add(bowler);

        // Ball
        const ballGeometry = new THREE.SphereGeometry(0.2, 32, 32);
        const ballMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
        const ball = new THREE.Mesh(ballGeometry, ballMaterial);
        ball.position.set(-2.5, 0.75, 0);
        scene.add(ball);

        // Camera position
        camera.position.z = 5;

        // Animations
        const animate = () => {
          requestAnimationFrame(animate);

          // Bowler slight bobbing
          bowler.position.y = 0.75 + Math.sin(Date.now() * 0.005) * 0.1;

          // Ball movement
          if (ball.position.x < 0) {
            ball.position.x += 0.02;
          } else {
            // Bat swing
            batsman.rotation.z = Math.sin(Date.now() * 0.005) * 0.5;
          }

          renderer.render(scene, camera);
        };

        animate();

        // Handle window resize
        const onWindowResize = () => {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
        };

        window.addEventListener('resize', onWindowResize);

        return () => {
          window.removeEventListener('resize', onWindowResize);
        };
      }, []);

      return <div ref={sceneRef} style={{ width: '100%', height: '100%' }}></div>;
    };

    ReactDOM.render(<CricketScene />, document.getElementById('root'));
  </script>
</body>
</html>
